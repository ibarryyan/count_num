// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: count_num.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//定义客户端请求的数据格式
//message 对应  生成的代码中的struct
type InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [修饰符] 类型 字段名 = 标识符
	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	InfoKey string `protobuf:"bytes,3,opt,name=info_key,json=infoKey,proto3" json:"info_key,omitempty"`
	InfoNum int64  `protobuf:"varint,4,opt,name=info_num,json=infoNum,proto3" json:"info_num,omitempty"`
}

func (x *InfoRequest) Reset() {
	*x = InfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_num_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoRequest) ProtoMessage() {}

func (x *InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_count_num_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoRequest.ProtoReflect.Descriptor instead.
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return file_count_num_proto_rawDescGZIP(), []int{0}
}

func (x *InfoRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InfoRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InfoRequest) GetInfoKey() string {
	if x != nil {
		return x.InfoKey
	}
	return ""
}

func (x *InfoRequest) GetInfoNum() int64 {
	if x != nil {
		return x.InfoNum
	}
	return 0
}

type InfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Count int64  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Data  string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InfoResponse) Reset() {
	*x = InfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_count_num_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoResponse) ProtoMessage() {}

func (x *InfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_count_num_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoResponse.ProtoReflect.Descriptor instead.
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return file_count_num_proto_rawDescGZIP(), []int{1}
}

func (x *InfoResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *InfoResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *InfoResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *InfoResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_count_num_proto protoreflect.FileDescriptor

var file_count_num_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x4e, 0x75,
	0x6d, 0x22, 0x5e, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0xef, 0x02, 0x0a, 0x0e, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x75, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x38, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x4e, 0x75, 0x6d, 0x42, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x10, 0x46,
	0x69, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b, 0x53, 0x61,
	0x76, 0x65, 0x4e, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x07, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_count_num_proto_rawDescOnce sync.Once
	file_count_num_proto_rawDescData = file_count_num_proto_rawDesc
)

func file_count_num_proto_rawDescGZIP() []byte {
	file_count_num_proto_rawDescOnce.Do(func() {
		file_count_num_proto_rawDescData = protoimpl.X.CompressGZIP(file_count_num_proto_rawDescData)
	})
	return file_count_num_proto_rawDescData
}

var file_count_num_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_count_num_proto_goTypes = []interface{}{
	(*InfoRequest)(nil),  // 0: proto.InfoRequest
	(*InfoResponse)(nil), // 1: proto.InfoResponse
}
var file_count_num_proto_depIdxs = []int32{
	0, // 0: proto.NumInfoService.GetNumInfoById:input_type -> proto.InfoRequest
	0, // 1: proto.NumInfoService.AddNumByKey:input_type -> proto.InfoRequest
	0, // 2: proto.NumInfoService.FindNumInfoByKey:input_type -> proto.InfoRequest
	0, // 3: proto.NumInfoService.SaveNumInfo:input_type -> proto.InfoRequest
	0, // 4: proto.NumInfoService.DeleteById:input_type -> proto.InfoRequest
	0, // 5: proto.NumInfoService.FindAll:input_type -> proto.InfoRequest
	1, // 6: proto.NumInfoService.GetNumInfoById:output_type -> proto.InfoResponse
	1, // 7: proto.NumInfoService.AddNumByKey:output_type -> proto.InfoResponse
	1, // 8: proto.NumInfoService.FindNumInfoByKey:output_type -> proto.InfoResponse
	1, // 9: proto.NumInfoService.SaveNumInfo:output_type -> proto.InfoResponse
	1, // 10: proto.NumInfoService.DeleteById:output_type -> proto.InfoResponse
	1, // 11: proto.NumInfoService.FindAll:output_type -> proto.InfoResponse
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_count_num_proto_init() }
func file_count_num_proto_init() {
	if File_count_num_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_count_num_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_count_num_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_count_num_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_count_num_proto_goTypes,
		DependencyIndexes: file_count_num_proto_depIdxs,
		MessageInfos:      file_count_num_proto_msgTypes,
	}.Build()
	File_count_num_proto = out.File
	file_count_num_proto_rawDesc = nil
	file_count_num_proto_goTypes = nil
	file_count_num_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NumInfoServiceClient is the client API for NumInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NumInfoServiceClient interface {
	//rpc 方式；定义GetUserInfo 远程调用
	GetNumInfoById(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	AddNumByKey(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	FindNumInfoByKey(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	SaveNumInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	DeleteById(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	FindAll(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
}

type numInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNumInfoServiceClient(cc grpc.ClientConnInterface) NumInfoServiceClient {
	return &numInfoServiceClient{cc}
}

func (c *numInfoServiceClient) GetNumInfoById(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/proto.NumInfoService/GetNumInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numInfoServiceClient) AddNumByKey(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/proto.NumInfoService/AddNumByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numInfoServiceClient) FindNumInfoByKey(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/proto.NumInfoService/FindNumInfoByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numInfoServiceClient) SaveNumInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/proto.NumInfoService/SaveNumInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numInfoServiceClient) DeleteById(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/proto.NumInfoService/DeleteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numInfoServiceClient) FindAll(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/proto.NumInfoService/FindAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NumInfoServiceServer is the server API for NumInfoService service.
type NumInfoServiceServer interface {
	//rpc 方式；定义GetUserInfo 远程调用
	GetNumInfoById(context.Context, *InfoRequest) (*InfoResponse, error)
	AddNumByKey(context.Context, *InfoRequest) (*InfoResponse, error)
	FindNumInfoByKey(context.Context, *InfoRequest) (*InfoResponse, error)
	SaveNumInfo(context.Context, *InfoRequest) (*InfoResponse, error)
	DeleteById(context.Context, *InfoRequest) (*InfoResponse, error)
	FindAll(context.Context, *InfoRequest) (*InfoResponse, error)
}

// UnimplementedNumInfoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNumInfoServiceServer struct {
}

func (*UnimplementedNumInfoServiceServer) GetNumInfoById(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumInfoById not implemented")
}
func (*UnimplementedNumInfoServiceServer) AddNumByKey(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNumByKey not implemented")
}
func (*UnimplementedNumInfoServiceServer) FindNumInfoByKey(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNumInfoByKey not implemented")
}
func (*UnimplementedNumInfoServiceServer) SaveNumInfo(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveNumInfo not implemented")
}
func (*UnimplementedNumInfoServiceServer) DeleteById(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteById not implemented")
}
func (*UnimplementedNumInfoServiceServer) FindAll(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}

func RegisterNumInfoServiceServer(s *grpc.Server, srv NumInfoServiceServer) {
	s.RegisterService(&_NumInfoService_serviceDesc, srv)
}

func _NumInfoService_GetNumInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumInfoServiceServer).GetNumInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NumInfoService/GetNumInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumInfoServiceServer).GetNumInfoById(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumInfoService_AddNumByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumInfoServiceServer).AddNumByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NumInfoService/AddNumByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumInfoServiceServer).AddNumByKey(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumInfoService_FindNumInfoByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumInfoServiceServer).FindNumInfoByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NumInfoService/FindNumInfoByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumInfoServiceServer).FindNumInfoByKey(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumInfoService_SaveNumInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumInfoServiceServer).SaveNumInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NumInfoService/SaveNumInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumInfoServiceServer).SaveNumInfo(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumInfoService_DeleteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumInfoServiceServer).DeleteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NumInfoService/DeleteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumInfoServiceServer).DeleteById(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumInfoService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumInfoServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NumInfoService/FindAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumInfoServiceServer).FindAll(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NumInfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NumInfoService",
	HandlerType: (*NumInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumInfoById",
			Handler:    _NumInfoService_GetNumInfoById_Handler,
		},
		{
			MethodName: "AddNumByKey",
			Handler:    _NumInfoService_AddNumByKey_Handler,
		},
		{
			MethodName: "FindNumInfoByKey",
			Handler:    _NumInfoService_FindNumInfoByKey_Handler,
		},
		{
			MethodName: "SaveNumInfo",
			Handler:    _NumInfoService_SaveNumInfo_Handler,
		},
		{
			MethodName: "DeleteById",
			Handler:    _NumInfoService_DeleteById_Handler,
		},
		{
			MethodName: "FindAll",
			Handler:    _NumInfoService_FindAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "count_num.proto",
}
